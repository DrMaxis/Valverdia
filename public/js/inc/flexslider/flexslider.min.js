/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "/";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 41);
/******/ })
/************************************************************************/
/******/ ({

/***/ 1:
/***/ (function(module, exports) {

eval("var g;\r\n\r\n// This works in non-strict mode\r\ng = (function() {\r\n\treturn this;\r\n})();\r\n\r\ntry {\r\n\t// This works if eval is allowed (see CSP)\r\n\tg = g || Function(\"return this\")() || (1,eval)(\"this\");\r\n} catch(e) {\r\n\t// This works if the window reference is available\r\n\tif(typeof window === \"object\")\r\n\t\tg = window;\r\n}\r\n\r\n// g can still be undefined, but nothing to do about it...\r\n// We return undefined, instead of nothing here, so it's\r\n// easier to handle this case. if(!global) { ...}\r\n\r\nmodule.exports = g;\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vKHdlYnBhY2spL2J1aWxkaW4vZ2xvYmFsLmpzPzM2OTgiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsQ0FBQzs7QUFFRDtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLDRDQUE0Qzs7QUFFNUMiLCJmaWxlIjoiMS5qcyIsInNvdXJjZXNDb250ZW50IjpbInZhciBnO1xyXG5cclxuLy8gVGhpcyB3b3JrcyBpbiBub24tc3RyaWN0IG1vZGVcclxuZyA9IChmdW5jdGlvbigpIHtcclxuXHRyZXR1cm4gdGhpcztcclxufSkoKTtcclxuXHJcbnRyeSB7XHJcblx0Ly8gVGhpcyB3b3JrcyBpZiBldmFsIGlzIGFsbG93ZWQgKHNlZSBDU1ApXHJcblx0ZyA9IGcgfHwgRnVuY3Rpb24oXCJyZXR1cm4gdGhpc1wiKSgpIHx8ICgxLGV2YWwpKFwidGhpc1wiKTtcclxufSBjYXRjaChlKSB7XHJcblx0Ly8gVGhpcyB3b3JrcyBpZiB0aGUgd2luZG93IHJlZmVyZW5jZSBpcyBhdmFpbGFibGVcclxuXHRpZih0eXBlb2Ygd2luZG93ID09PSBcIm9iamVjdFwiKVxyXG5cdFx0ZyA9IHdpbmRvdztcclxufVxyXG5cclxuLy8gZyBjYW4gc3RpbGwgYmUgdW5kZWZpbmVkLCBidXQgbm90aGluZyB0byBkbyBhYm91dCBpdC4uLlxyXG4vLyBXZSByZXR1cm4gdW5kZWZpbmVkLCBpbnN0ZWFkIG9mIG5vdGhpbmcgaGVyZSwgc28gaXQnc1xyXG4vLyBlYXNpZXIgdG8gaGFuZGxlIHRoaXMgY2FzZS4gaWYoIWdsb2JhbCkgeyAuLi59XHJcblxyXG5tb2R1bGUuZXhwb3J0cyA9IGc7XHJcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vICh3ZWJwYWNrKS9idWlsZGluL2dsb2JhbC5qc1xuLy8gbW9kdWxlIGlkID0gMVxuLy8gbW9kdWxlIGNodW5rcyA9IDEgMiAzIDUgNiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///1\n");

/***/ }),

/***/ 41:
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__(42);


/***/ }),

/***/ 42:
/***/ (function(module, exports, __webpack_require__) {

eval("/* WEBPACK VAR INJECTION */(function(setImmediate) {var _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\n/*\n * jQuery FlexSlider v2.7.1\n * Copyright 2012 WooThemes\n * Contributing Author: Tyler Smith\n */\n\n(function ($) {\n\n  var focused = true;\n\n  //FlexSlider: Object Instance\n  $.flexslider = function (el, options) {\n    var slider = $(el);\n\n    // making variables public\n\n    //if rtl value was not passed and html is in rtl..enable it by default.\n    if (typeof options.rtl == 'undefined' && $('html').attr('dir') == 'rtl') {\n      options.rtl = true;\n    }\n    slider.vars = $.extend({}, $.flexslider.defaults, options);\n\n    var namespace = slider.vars.namespace,\n        msGesture = window.navigator && window.navigator.msPointerEnabled && window.MSGesture,\n        touch = (\"ontouchstart\" in window || msGesture || window.DocumentTouch && document instanceof DocumentTouch) && slider.vars.touch,\n\n    // deprecating this idea, as devices are being released with both of these events\n    eventType = \"click touchend MSPointerUp keyup\",\n        watchedEvent = \"\",\n        watchedEventClearTimer,\n        vertical = slider.vars.direction === \"vertical\",\n        reverse = slider.vars.reverse,\n        carousel = slider.vars.itemWidth > 0,\n        fade = slider.vars.animation === \"fade\",\n        asNav = slider.vars.asNavFor !== \"\",\n        methods = {};\n\n    // Store a reference to the slider object\n    $.data(el, \"flexslider\", slider);\n\n    // Private slider methods\n    methods = {\n      init: function init() {\n        slider.animating = false;\n        // Get current slide and make sure it is a number\n        slider.currentSlide = parseInt(slider.vars.startAt ? slider.vars.startAt : 0, 10);\n        if (isNaN(slider.currentSlide)) {\n          slider.currentSlide = 0;\n        }\n        slider.animatingTo = slider.currentSlide;\n        slider.atEnd = slider.currentSlide === 0 || slider.currentSlide === slider.last;\n        slider.containerSelector = slider.vars.selector.substr(0, slider.vars.selector.search(' '));\n        slider.slides = $(slider.vars.selector, slider);\n        slider.container = $(slider.containerSelector, slider);\n        slider.count = slider.slides.length;\n        // SYNC:\n        slider.syncExists = $(slider.vars.sync).length > 0;\n        // SLIDE:\n        if (slider.vars.animation === \"slide\") {\n          slider.vars.animation = \"swing\";\n        }\n        slider.prop = vertical ? \"top\" : slider.vars.rtl ? \"marginRight\" : \"marginLeft\";\n        slider.args = {};\n        // SLIDESHOW:\n        slider.manualPause = false;\n        slider.stopped = false;\n        //PAUSE WHEN INVISIBLE\n        slider.started = false;\n        slider.startTimeout = null;\n        // TOUCH/USECSS:\n        slider.transitions = !slider.vars.video && !fade && slider.vars.useCSS && function () {\n          var obj = document.createElement('div'),\n              props = ['perspectiveProperty', 'WebkitPerspective', 'MozPerspective', 'OPerspective', 'msPerspective'];\n          for (var i in props) {\n            if (obj.style[props[i]] !== undefined) {\n              slider.pfx = props[i].replace('Perspective', '').toLowerCase();\n              slider.prop = \"-\" + slider.pfx + \"-transform\";\n              return true;\n            }\n          }\n          return false;\n        }();\n        slider.isFirefox = navigator.userAgent.toLowerCase().indexOf('firefox') > -1;\n        slider.ensureAnimationEnd = '';\n        // CONTROLSCONTAINER:\n        if (slider.vars.controlsContainer !== \"\") slider.controlsContainer = $(slider.vars.controlsContainer).length > 0 && $(slider.vars.controlsContainer);\n        // MANUAL:\n        if (slider.vars.manualControls !== \"\") slider.manualControls = $(slider.vars.manualControls).length > 0 && $(slider.vars.manualControls);\n\n        // CUSTOM DIRECTION NAV:\n        if (slider.vars.customDirectionNav !== \"\") slider.customDirectionNav = $(slider.vars.customDirectionNav).length === 2 && $(slider.vars.customDirectionNav);\n\n        // RANDOMIZE:\n        if (slider.vars.randomize) {\n          slider.slides.sort(function () {\n            return Math.round(Math.random()) - 0.5;\n          });\n          slider.container.empty().append(slider.slides);\n        }\n\n        slider.doMath();\n\n        // INIT\n        slider.setup(\"init\");\n\n        // CONTROLNAV:\n        if (slider.vars.controlNav) {\n          methods.controlNav.setup();\n        }\n\n        // DIRECTIONNAV:\n        if (slider.vars.directionNav) {\n          methods.directionNav.setup();\n        }\n\n        // KEYBOARD:\n        if (slider.vars.keyboard && ($(slider.containerSelector).length === 1 || slider.vars.multipleKeyboard)) {\n          $(document).bind('keyup', function (event) {\n            var keycode = event.keyCode;\n            if (!slider.animating && (keycode === 39 || keycode === 37)) {\n              var target = slider.vars.rtl ? keycode === 37 ? slider.getTarget('next') : keycode === 39 ? slider.getTarget('prev') : false : keycode === 39 ? slider.getTarget('next') : keycode === 37 ? slider.getTarget('prev') : false;\n              slider.flexAnimate(target, slider.vars.pauseOnAction);\n            }\n          });\n        }\n        // MOUSEWHEEL:\n        if (slider.vars.mousewheel) {\n          slider.bind('mousewheel', function (event, delta, deltaX, deltaY) {\n            event.preventDefault();\n            var target = delta < 0 ? slider.getTarget('next') : slider.getTarget('prev');\n            slider.flexAnimate(target, slider.vars.pauseOnAction);\n          });\n        }\n\n        // PAUSEPLAY\n        if (slider.vars.pausePlay) {\n          methods.pausePlay.setup();\n        }\n\n        //PAUSE WHEN INVISIBLE\n        if (slider.vars.slideshow && slider.vars.pauseInvisible) {\n          methods.pauseInvisible.init();\n        }\n\n        // SLIDSESHOW\n        if (slider.vars.slideshow) {\n          if (slider.vars.pauseOnHover) {\n            slider.hover(function () {\n              if (!slider.manualPlay && !slider.manualPause) {\n                slider.pause();\n              }\n            }, function () {\n              if (!slider.manualPause && !slider.manualPlay && !slider.stopped) {\n                slider.play();\n              }\n            });\n          }\n          // initialize animation\n          //If we're visible, or we don't use PageVisibility API\n          if (!slider.vars.pauseInvisible || !methods.pauseInvisible.isHidden()) {\n            slider.vars.initDelay > 0 ? slider.startTimeout = setTimeout(slider.play, slider.vars.initDelay) : slider.play();\n          }\n        }\n\n        // ASNAV:\n        if (asNav) {\n          methods.asNav.setup();\n        }\n\n        // TOUCH\n        if (touch && slider.vars.touch) {\n          methods.touch();\n        }\n\n        // FADE&&SMOOTHHEIGHT || SLIDE:\n        if (!fade || fade && slider.vars.smoothHeight) {\n          $(window).bind(\"resize orientationchange focus\", methods.resize);\n        }\n\n        slider.find(\"img\").attr(\"draggable\", \"false\");\n\n        // API: start() Callback\n        setTimeout(function () {\n          slider.vars.start(slider);\n        }, 200);\n      },\n      asNav: {\n        setup: function setup() {\n          slider.asNav = true;\n          slider.animatingTo = Math.floor(slider.currentSlide / slider.move);\n          slider.currentItem = slider.currentSlide;\n          slider.slides.removeClass(namespace + \"active-slide\").eq(slider.currentItem).addClass(namespace + \"active-slide\");\n          if (!msGesture) {\n            slider.slides.on(eventType, function (e) {\n              e.preventDefault();\n              var $slide = $(this),\n                  target = $slide.index();\n              var posFromX;\n              if (slider.vars.rtl) {\n                posFromX = -1 * ($slide.offset().right - $(slider).scrollLeft()); // Find position of slide relative to right of slider container\n              } else {\n                posFromX = $slide.offset().left - $(slider).scrollLeft(); // Find position of slide relative to left of slider container\n              }\n              if (posFromX <= 0 && $slide.hasClass(namespace + 'active-slide')) {\n                slider.flexAnimate(slider.getTarget(\"prev\"), true);\n              } else if (!$(slider.vars.asNavFor).data('flexslider').animating && !$slide.hasClass(namespace + \"active-slide\")) {\n                slider.direction = slider.currentItem < target ? \"next\" : \"prev\";\n                slider.flexAnimate(target, slider.vars.pauseOnAction, false, true, true);\n              }\n            });\n          } else {\n            el._slider = slider;\n            slider.slides.each(function () {\n              var that = this;\n              that._gesture = new MSGesture();\n              that._gesture.target = that;\n              that.addEventListener(\"MSPointerDown\", function (e) {\n                e.preventDefault();\n                if (e.currentTarget._gesture) {\n                  e.currentTarget._gesture.addPointer(e.pointerId);\n                }\n              }, false);\n              that.addEventListener(\"MSGestureTap\", function (e) {\n                e.preventDefault();\n                var $slide = $(this),\n                    target = $slide.index();\n                if (!$(slider.vars.asNavFor).data('flexslider').animating && !$slide.hasClass('active')) {\n                  slider.direction = slider.currentItem < target ? \"next\" : \"prev\";\n                  slider.flexAnimate(target, slider.vars.pauseOnAction, false, true, true);\n                }\n              });\n            });\n          }\n        }\n      },\n      controlNav: {\n        setup: function setup() {\n          if (!slider.manualControls) {\n            methods.controlNav.setupPaging();\n          } else {\n            // MANUALCONTROLS:\n            methods.controlNav.setupManual();\n          }\n        },\n        setupPaging: function setupPaging() {\n          var type = slider.vars.controlNav === \"thumbnails\" ? 'control-thumbs' : 'control-paging',\n              j = 1,\n              item,\n              slide;\n\n          slider.controlNavScaffold = $('<ol class=\"' + namespace + 'control-nav ' + namespace + type + '\"></ol>');\n\n          if (slider.pagingCount > 1) {\n            for (var i = 0; i < slider.pagingCount; i++) {\n              slide = slider.slides.eq(i);\n              if (undefined === slide.attr('data-thumb-alt')) {\n                slide.attr('data-thumb-alt', '');\n              }\n              var altText = '' !== slide.attr('data-thumb-alt') ? altText = ' alt=\"' + slide.attr('data-thumb-alt') + '\"' : '';\n              item = slider.vars.controlNav === \"thumbnails\" ? '<img src=\"' + slide.attr('data-thumb') + '\"' + altText + '/>' : '<a href=\"#\">' + j + '</a>';\n              if ('thumbnails' === slider.vars.controlNav && true === slider.vars.thumbCaptions) {\n                var captn = slide.attr('data-thumbcaption');\n                if ('' !== captn && undefined !== captn) {\n                  item += '<span class=\"' + namespace + 'caption\">' + captn + '</span>';\n                }\n              }\n              slider.controlNavScaffold.append('<li>' + item + '</li>');\n              j++;\n            }\n          }\n\n          // CONTROLSCONTAINER:\n          slider.controlsContainer ? $(slider.controlsContainer).append(slider.controlNavScaffold) : slider.append(slider.controlNavScaffold);\n          methods.controlNav.set();\n\n          methods.controlNav.active();\n\n          slider.controlNavScaffold.delegate('a, img', eventType, function (event) {\n            event.preventDefault();\n\n            if (watchedEvent === \"\" || watchedEvent === event.type) {\n              var $this = $(this),\n                  target = slider.controlNav.index($this);\n\n              if (!$this.hasClass(namespace + 'active')) {\n                slider.direction = target > slider.currentSlide ? \"next\" : \"prev\";\n                slider.flexAnimate(target, slider.vars.pauseOnAction);\n              }\n            }\n\n            // setup flags to prevent event duplication\n            if (watchedEvent === \"\") {\n              watchedEvent = event.type;\n            }\n            methods.setToClearWatchedEvent();\n          });\n        },\n        setupManual: function setupManual() {\n          slider.controlNav = slider.manualControls;\n          methods.controlNav.active();\n\n          slider.controlNav.bind(eventType, function (event) {\n            event.preventDefault();\n\n            if (watchedEvent === \"\" || watchedEvent === event.type) {\n              var $this = $(this),\n                  target = slider.controlNav.index($this);\n\n              if (!$this.hasClass(namespace + 'active')) {\n                target > slider.currentSlide ? slider.direction = \"next\" : slider.direction = \"prev\";\n                slider.flexAnimate(target, slider.vars.pauseOnAction);\n              }\n            }\n\n            // setup flags to prevent event duplication\n            if (watchedEvent === \"\") {\n              watchedEvent = event.type;\n            }\n            methods.setToClearWatchedEvent();\n          });\n        },\n        set: function set() {\n          var selector = slider.vars.controlNav === \"thumbnails\" ? 'img' : 'a';\n          slider.controlNav = $('.' + namespace + 'control-nav li ' + selector, slider.controlsContainer ? slider.controlsContainer : slider);\n        },\n        active: function active() {\n          slider.controlNav.removeClass(namespace + \"active\").eq(slider.animatingTo).addClass(namespace + \"active\");\n        },\n        update: function update(action, pos) {\n          if (slider.pagingCount > 1 && action === \"add\") {\n            slider.controlNavScaffold.append($('<li><a href=\"#\">' + slider.count + '</a></li>'));\n          } else if (slider.pagingCount === 1) {\n            slider.controlNavScaffold.find('li').remove();\n          } else {\n            slider.controlNav.eq(pos).closest('li').remove();\n          }\n          methods.controlNav.set();\n          slider.pagingCount > 1 && slider.pagingCount !== slider.controlNav.length ? slider.update(pos, action) : methods.controlNav.active();\n        }\n      },\n      directionNav: {\n        setup: function setup() {\n          var directionNavScaffold = $('<ul class=\"' + namespace + 'direction-nav\"><li class=\"' + namespace + 'nav-prev\"><a class=\"' + namespace + 'prev\" href=\"#\">' + slider.vars.prevText + '</a></li><li class=\"' + namespace + 'nav-next\"><a class=\"' + namespace + 'next\" href=\"#\">' + slider.vars.nextText + '</a></li></ul>');\n\n          // CUSTOM DIRECTION NAV:\n          if (slider.customDirectionNav) {\n            slider.directionNav = slider.customDirectionNav;\n            // CONTROLSCONTAINER:\n          } else if (slider.controlsContainer) {\n            $(slider.controlsContainer).append(directionNavScaffold);\n            slider.directionNav = $('.' + namespace + 'direction-nav li a', slider.controlsContainer);\n          } else {\n            slider.append(directionNavScaffold);\n            slider.directionNav = $('.' + namespace + 'direction-nav li a', slider);\n          }\n\n          methods.directionNav.update();\n\n          slider.directionNav.bind(eventType, function (event) {\n            event.preventDefault();\n            var target;\n\n            if (watchedEvent === \"\" || watchedEvent === event.type) {\n              target = $(this).hasClass(namespace + 'next') ? slider.getTarget('next') : slider.getTarget('prev');\n              slider.flexAnimate(target, slider.vars.pauseOnAction);\n            }\n\n            // setup flags to prevent event duplication\n            if (watchedEvent === \"\") {\n              watchedEvent = event.type;\n            }\n            methods.setToClearWatchedEvent();\n          });\n        },\n        update: function update() {\n          var disabledClass = namespace + 'disabled';\n          if (slider.pagingCount === 1) {\n            slider.directionNav.addClass(disabledClass).attr('tabindex', '-1');\n          } else if (!slider.vars.animationLoop) {\n            if (slider.animatingTo === 0) {\n              slider.directionNav.removeClass(disabledClass).filter('.' + namespace + \"prev\").addClass(disabledClass).attr('tabindex', '-1');\n            } else if (slider.animatingTo === slider.last) {\n              slider.directionNav.removeClass(disabledClass).filter('.' + namespace + \"next\").addClass(disabledClass).attr('tabindex', '-1');\n            } else {\n              slider.directionNav.removeClass(disabledClass).removeAttr('tabindex');\n            }\n          } else {\n            slider.directionNav.removeClass(disabledClass).removeAttr('tabindex');\n          }\n        }\n      },\n      pausePlay: {\n        setup: function setup() {\n          var pausePlayScaffold = $('<div class=\"' + namespace + 'pauseplay\"><a href=\"#\"></a></div>');\n\n          // CONTROLSCONTAINER:\n          if (slider.controlsContainer) {\n            slider.controlsContainer.append(pausePlayScaffold);\n            slider.pausePlay = $('.' + namespace + 'pauseplay a', slider.controlsContainer);\n          } else {\n            slider.append(pausePlayScaffold);\n            slider.pausePlay = $('.' + namespace + 'pauseplay a', slider);\n          }\n\n          methods.pausePlay.update(slider.vars.slideshow ? namespace + 'pause' : namespace + 'play');\n\n          slider.pausePlay.bind(eventType, function (event) {\n            event.preventDefault();\n\n            if (watchedEvent === \"\" || watchedEvent === event.type) {\n              if ($(this).hasClass(namespace + 'pause')) {\n                slider.manualPause = true;\n                slider.manualPlay = false;\n                slider.pause();\n              } else {\n                slider.manualPause = false;\n                slider.manualPlay = true;\n                slider.play();\n              }\n            }\n\n            // setup flags to prevent event duplication\n            if (watchedEvent === \"\") {\n              watchedEvent = event.type;\n            }\n            methods.setToClearWatchedEvent();\n          });\n        },\n        update: function update(state) {\n          state === \"play\" ? slider.pausePlay.removeClass(namespace + 'pause').addClass(namespace + 'play').html(slider.vars.playText) : slider.pausePlay.removeClass(namespace + 'play').addClass(namespace + 'pause').html(slider.vars.pauseText);\n        }\n      },\n      touch: function touch() {\n        var startX,\n            startY,\n            offset,\n            cwidth,\n            dx,\n            startT,\n            onTouchStart,\n            onTouchMove,\n            _onTouchEnd,\n            scrolling = false,\n            localX = 0,\n            localY = 0,\n            accDx = 0;\n\n        if (!msGesture) {\n          onTouchStart = function onTouchStart(e) {\n            if (slider.animating) {\n              e.preventDefault();\n            } else if (window.navigator.msPointerEnabled || e.touches.length === 1) {\n              slider.pause();\n              // CAROUSEL:\n              cwidth = vertical ? slider.h : slider.w;\n              startT = Number(new Date());\n              // CAROUSEL:\n\n              // Local vars for X and Y points.\n              localX = e.touches[0].pageX;\n              localY = e.touches[0].pageY;\n\n              offset = carousel && reverse && slider.animatingTo === slider.last ? 0 : carousel && reverse ? slider.limit - (slider.itemW + slider.vars.itemMargin) * slider.move * slider.animatingTo : carousel && slider.currentSlide === slider.last ? slider.limit : carousel ? (slider.itemW + slider.vars.itemMargin) * slider.move * slider.currentSlide : reverse ? (slider.last - slider.currentSlide + slider.cloneOffset) * cwidth : (slider.currentSlide + slider.cloneOffset) * cwidth;\n              startX = vertical ? localY : localX;\n              startY = vertical ? localX : localY;\n              el.addEventListener('touchmove', onTouchMove, false);\n              el.addEventListener('touchend', _onTouchEnd, false);\n            }\n          };\n\n          onTouchMove = function onTouchMove(e) {\n            // Local vars for X and Y points.\n\n            localX = e.touches[0].pageX;\n            localY = e.touches[0].pageY;\n\n            dx = vertical ? startX - localY : (slider.vars.rtl ? -1 : 1) * (startX - localX);\n            scrolling = vertical ? Math.abs(dx) < Math.abs(localX - startY) : Math.abs(dx) < Math.abs(localY - startY);\n            var fxms = 500;\n\n            if (!scrolling || Number(new Date()) - startT > fxms) {\n              e.preventDefault();\n              if (!fade && slider.transitions) {\n                if (!slider.vars.animationLoop) {\n                  dx = dx / (slider.currentSlide === 0 && dx < 0 || slider.currentSlide === slider.last && dx > 0 ? Math.abs(dx) / cwidth + 2 : 1);\n                }\n                slider.setProps(offset + dx, \"setTouch\");\n              }\n            }\n          };\n\n          _onTouchEnd = function onTouchEnd(e) {\n            // finish the touch by undoing the touch session\n            el.removeEventListener('touchmove', onTouchMove, false);\n\n            if (slider.animatingTo === slider.currentSlide && !scrolling && !(dx === null)) {\n              var updateDx = reverse ? -dx : dx,\n                  target = updateDx > 0 ? slider.getTarget('next') : slider.getTarget('prev');\n\n              if (slider.canAdvance(target) && (Number(new Date()) - startT < 550 && Math.abs(updateDx) > 50 || Math.abs(updateDx) > cwidth / 2)) {\n                slider.flexAnimate(target, slider.vars.pauseOnAction);\n              } else {\n                if (!fade) {\n                  slider.flexAnimate(slider.currentSlide, slider.vars.pauseOnAction, true);\n                }\n              }\n            }\n            el.removeEventListener('touchend', _onTouchEnd, false);\n\n            startX = null;\n            startY = null;\n            dx = null;\n            offset = null;\n          };\n\n          el.addEventListener('touchstart', onTouchStart, false);\n        } else {\n          var onMSPointerDown = function onMSPointerDown(e) {\n            e.stopPropagation();\n            if (slider.animating) {\n              e.preventDefault();\n            } else {\n              slider.pause();\n              el._gesture.addPointer(e.pointerId);\n              accDx = 0;\n              cwidth = vertical ? slider.h : slider.w;\n              startT = Number(new Date());\n              // CAROUSEL:\n\n              offset = carousel && reverse && slider.animatingTo === slider.last ? 0 : carousel && reverse ? slider.limit - (slider.itemW + slider.vars.itemMargin) * slider.move * slider.animatingTo : carousel && slider.currentSlide === slider.last ? slider.limit : carousel ? (slider.itemW + slider.vars.itemMargin) * slider.move * slider.currentSlide : reverse ? (slider.last - slider.currentSlide + slider.cloneOffset) * cwidth : (slider.currentSlide + slider.cloneOffset) * cwidth;\n            }\n          };\n\n          var onMSGestureChange = function onMSGestureChange(e) {\n            e.stopPropagation();\n            var slider = e.target._slider;\n            if (!slider) {\n              return;\n            }\n            var transX = -e.translationX,\n                transY = -e.translationY;\n\n            //Accumulate translations.\n            accDx = accDx + (vertical ? transY : transX);\n            dx = (slider.vars.rtl ? -1 : 1) * accDx;\n            scrolling = vertical ? Math.abs(accDx) < Math.abs(-transX) : Math.abs(accDx) < Math.abs(-transY);\n\n            if (e.detail === e.MSGESTURE_FLAG_INERTIA) {\n              setImmediate(function () {\n                el._gesture.stop();\n              });\n\n              return;\n            }\n\n            if (!scrolling || Number(new Date()) - startT > 500) {\n              e.preventDefault();\n              if (!fade && slider.transitions) {\n                if (!slider.vars.animationLoop) {\n                  dx = accDx / (slider.currentSlide === 0 && accDx < 0 || slider.currentSlide === slider.last && accDx > 0 ? Math.abs(accDx) / cwidth + 2 : 1);\n                }\n                slider.setProps(offset + dx, \"setTouch\");\n              }\n            }\n          };\n\n          var onMSGestureEnd = function onMSGestureEnd(e) {\n            e.stopPropagation();\n            var slider = e.target._slider;\n            if (!slider) {\n              return;\n            }\n            if (slider.animatingTo === slider.currentSlide && !scrolling && !(dx === null)) {\n              var updateDx = reverse ? -dx : dx,\n                  target = updateDx > 0 ? slider.getTarget('next') : slider.getTarget('prev');\n\n              if (slider.canAdvance(target) && (Number(new Date()) - startT < 550 && Math.abs(updateDx) > 50 || Math.abs(updateDx) > cwidth / 2)) {\n                slider.flexAnimate(target, slider.vars.pauseOnAction);\n              } else {\n                if (!fade) {\n                  slider.flexAnimate(slider.currentSlide, slider.vars.pauseOnAction, true);\n                }\n              }\n            }\n\n            startX = null;\n            startY = null;\n            dx = null;\n            offset = null;\n            accDx = 0;\n          };\n\n          el.style.msTouchAction = \"none\";\n          el._gesture = new MSGesture();\n          el._gesture.target = el;\n          el.addEventListener(\"MSPointerDown\", onMSPointerDown, false);\n          el._slider = slider;\n          el.addEventListener(\"MSGestureChange\", onMSGestureChange, false);\n          el.addEventListener(\"MSGestureEnd\", onMSGestureEnd, false);\n        }\n      },\n      resize: function resize() {\n        if (!slider.animating && slider.is(':visible')) {\n          if (!carousel) {\n            slider.doMath();\n          }\n\n          if (fade) {\n            // SMOOTH HEIGHT:\n            methods.smoothHeight();\n          } else if (carousel) {\n            //CAROUSEL:\n            slider.slides.width(slider.computedW);\n            slider.update(slider.pagingCount);\n            slider.setProps();\n          } else if (vertical) {\n            //VERTICAL:\n            slider.viewport.height(slider.h);\n            slider.setProps(slider.h, \"setTotal\");\n          } else {\n            // SMOOTH HEIGHT:\n            if (slider.vars.smoothHeight) {\n              methods.smoothHeight();\n            }\n            slider.newSlides.width(slider.computedW);\n            slider.setProps(slider.computedW, \"setTotal\");\n          }\n        }\n      },\n      smoothHeight: function smoothHeight(dur) {\n        if (!vertical || fade) {\n          var $obj = fade ? slider : slider.viewport;\n          dur ? $obj.animate({ \"height\": slider.slides.eq(slider.animatingTo).innerHeight() }, dur) : $obj.innerHeight(slider.slides.eq(slider.animatingTo).innerHeight());\n        }\n      },\n      sync: function sync(action) {\n        var $obj = $(slider.vars.sync).data(\"flexslider\"),\n            target = slider.animatingTo;\n\n        switch (action) {\n          case \"animate\":\n            $obj.flexAnimate(target, slider.vars.pauseOnAction, false, true);break;\n          case \"play\":\n            if (!$obj.playing && !$obj.asNav) {\n              $obj.play();\n            }break;\n          case \"pause\":\n            $obj.pause();break;\n        }\n      },\n      uniqueID: function uniqueID($clone) {\n        // Append _clone to current level and children elements with id attributes\n        $clone.filter('[id]').add($clone.find('[id]')).each(function () {\n          var $this = $(this);\n          $this.attr('id', $this.attr('id') + '_clone');\n        });\n        return $clone;\n      },\n      pauseInvisible: {\n        visProp: null,\n        init: function init() {\n          var visProp = methods.pauseInvisible.getHiddenProp();\n          if (visProp) {\n            var evtname = visProp.replace(/[H|h]idden/, '') + 'visibilitychange';\n            document.addEventListener(evtname, function () {\n              if (methods.pauseInvisible.isHidden()) {\n                if (slider.startTimeout) {\n                  clearTimeout(slider.startTimeout); //If clock is ticking, stop timer and prevent from starting while invisible\n                } else {\n                  slider.pause(); //Or just pause\n                }\n              } else {\n                if (slider.started) {\n                  slider.play(); //Initiated before, just play\n                } else {\n                  if (slider.vars.initDelay > 0) {\n                    setTimeout(slider.play, slider.vars.initDelay);\n                  } else {\n                    slider.play(); //Didn't init before: simply init or wait for it\n                  }\n                }\n              }\n            });\n          }\n        },\n        isHidden: function isHidden() {\n          var prop = methods.pauseInvisible.getHiddenProp();\n          if (!prop) {\n            return false;\n          }\n          return document[prop];\n        },\n        getHiddenProp: function getHiddenProp() {\n          var prefixes = ['webkit', 'moz', 'ms', 'o'];\n          // if 'hidden' is natively supported just return it\n          if ('hidden' in document) {\n            return 'hidden';\n          }\n          // otherwise loop over all the known prefixes until we find one\n          for (var i = 0; i < prefixes.length; i++) {\n            if (prefixes[i] + 'Hidden' in document) {\n              return prefixes[i] + 'Hidden';\n            }\n          }\n          // otherwise it's not supported\n          return null;\n        }\n      },\n      setToClearWatchedEvent: function setToClearWatchedEvent() {\n        clearTimeout(watchedEventClearTimer);\n        watchedEventClearTimer = setTimeout(function () {\n          watchedEvent = \"\";\n        }, 3000);\n      }\n    };\n\n    // public methods\n    slider.flexAnimate = function (target, pause, override, withSync, fromNav) {\n      if (!slider.vars.animationLoop && target !== slider.currentSlide) {\n        slider.direction = target > slider.currentSlide ? \"next\" : \"prev\";\n      }\n\n      if (asNav && slider.pagingCount === 1) slider.direction = slider.currentItem < target ? \"next\" : \"prev\";\n\n      if (!slider.animating && (slider.canAdvance(target, fromNav) || override) && slider.is(\":visible\")) {\n        if (asNav && withSync) {\n          var master = $(slider.vars.asNavFor).data('flexslider');\n          slider.atEnd = target === 0 || target === slider.count - 1;\n          master.flexAnimate(target, true, false, true, fromNav);\n          slider.direction = slider.currentItem < target ? \"next\" : \"prev\";\n          master.direction = slider.direction;\n\n          if (Math.ceil((target + 1) / slider.visible) - 1 !== slider.currentSlide && target !== 0) {\n            slider.currentItem = target;\n            slider.slides.removeClass(namespace + \"active-slide\").eq(target).addClass(namespace + \"active-slide\");\n            target = Math.floor(target / slider.visible);\n          } else {\n            slider.currentItem = target;\n            slider.slides.removeClass(namespace + \"active-slide\").eq(target).addClass(namespace + \"active-slide\");\n            return false;\n          }\n        }\n\n        slider.animating = true;\n        slider.animatingTo = target;\n\n        // SLIDESHOW:\n        if (pause) {\n          slider.pause();\n        }\n\n        // API: before() animation Callback\n        slider.vars.before(slider);\n\n        // SYNC:\n        if (slider.syncExists && !fromNav) {\n          methods.sync(\"animate\");\n        }\n\n        // CONTROLNAV\n        if (slider.vars.controlNav) {\n          methods.controlNav.active();\n        }\n\n        // !CAROUSEL:\n        // CANDIDATE: slide active class (for add/remove slide)\n        if (!carousel) {\n          slider.slides.removeClass(namespace + 'active-slide').eq(target).addClass(namespace + 'active-slide');\n        }\n\n        // INFINITE LOOP:\n        // CANDIDATE: atEnd\n        slider.atEnd = target === 0 || target === slider.last;\n\n        // DIRECTIONNAV:\n        if (slider.vars.directionNav) {\n          methods.directionNav.update();\n        }\n\n        if (target === slider.last) {\n          // API: end() of cycle Callback\n          slider.vars.end(slider);\n          // SLIDESHOW && !INFINITE LOOP:\n          if (!slider.vars.animationLoop) {\n            slider.pause();\n          }\n        }\n\n        // SLIDE:\n        if (!fade) {\n          var dimension = vertical ? slider.slides.filter(':first').height() : slider.computedW,\n              margin,\n              slideString,\n              calcNext;\n\n          // INFINITE LOOP / REVERSE:\n          if (carousel) {\n            margin = slider.vars.itemMargin;\n            calcNext = (slider.itemW + margin) * slider.move * slider.animatingTo;\n            slideString = calcNext > slider.limit && slider.visible !== 1 ? slider.limit : calcNext;\n          } else if (slider.currentSlide === 0 && target === slider.count - 1 && slider.vars.animationLoop && slider.direction !== \"next\") {\n            slideString = reverse ? (slider.count + slider.cloneOffset) * dimension : 0;\n          } else if (slider.currentSlide === slider.last && target === 0 && slider.vars.animationLoop && slider.direction !== \"prev\") {\n            slideString = reverse ? 0 : (slider.count + 1) * dimension;\n          } else {\n            slideString = reverse ? (slider.count - 1 - target + slider.cloneOffset) * dimension : (target + slider.cloneOffset) * dimension;\n          }\n          slider.setProps(slideString, \"\", slider.vars.animationSpeed);\n          if (slider.transitions) {\n            if (!slider.vars.animationLoop || !slider.atEnd) {\n              slider.animating = false;\n              slider.currentSlide = slider.animatingTo;\n            }\n\n            // Unbind previous transitionEnd events and re-bind new transitionEnd event\n            slider.container.unbind(\"webkitTransitionEnd transitionend\");\n            slider.container.bind(\"webkitTransitionEnd transitionend\", function () {\n              clearTimeout(slider.ensureAnimationEnd);\n              slider.wrapup(dimension);\n            });\n\n            // Insurance for the ever-so-fickle transitionEnd event\n            clearTimeout(slider.ensureAnimationEnd);\n            slider.ensureAnimationEnd = setTimeout(function () {\n              slider.wrapup(dimension);\n            }, slider.vars.animationSpeed + 100);\n          } else {\n            slider.container.animate(slider.args, slider.vars.animationSpeed, slider.vars.easing, function () {\n              slider.wrapup(dimension);\n            });\n          }\n        } else {\n          // FADE:\n          if (!touch) {\n            slider.slides.eq(slider.currentSlide).css({ \"zIndex\": 1 }).animate({ \"opacity\": 0 }, slider.vars.animationSpeed, slider.vars.easing);\n            slider.slides.eq(target).css({ \"zIndex\": 2 }).animate({ \"opacity\": 1 }, slider.vars.animationSpeed, slider.vars.easing, slider.wrapup);\n          } else {\n            slider.slides.eq(slider.currentSlide).css({ \"opacity\": 0, \"zIndex\": 1 });\n            slider.slides.eq(target).css({ \"opacity\": 1, \"zIndex\": 2 });\n            slider.wrapup(dimension);\n          }\n        }\n        // SMOOTH HEIGHT:\n        if (slider.vars.smoothHeight) {\n          methods.smoothHeight(slider.vars.animationSpeed);\n        }\n      }\n    };\n    slider.wrapup = function (dimension) {\n      // SLIDE:\n      if (!fade && !carousel) {\n        if (slider.currentSlide === 0 && slider.animatingTo === slider.last && slider.vars.animationLoop) {\n          slider.setProps(dimension, \"jumpEnd\");\n        } else if (slider.currentSlide === slider.last && slider.animatingTo === 0 && slider.vars.animationLoop) {\n          slider.setProps(dimension, \"jumpStart\");\n        }\n      }\n      slider.animating = false;\n      slider.currentSlide = slider.animatingTo;\n      // API: after() animation Callback\n      slider.vars.after(slider);\n    };\n\n    // SLIDESHOW:\n    slider.animateSlides = function () {\n      if (!slider.animating && focused) {\n        slider.flexAnimate(slider.getTarget(\"next\"));\n      }\n    };\n    // SLIDESHOW:\n    slider.pause = function () {\n      clearInterval(slider.animatedSlides);\n      slider.animatedSlides = null;\n      slider.playing = false;\n      // PAUSEPLAY:\n      if (slider.vars.pausePlay) {\n        methods.pausePlay.update(\"play\");\n      }\n      // SYNC:\n      if (slider.syncExists) {\n        methods.sync(\"pause\");\n      }\n    };\n    // SLIDESHOW:\n    slider.play = function () {\n      if (slider.playing) {\n        clearInterval(slider.animatedSlides);\n      }\n      slider.animatedSlides = slider.animatedSlides || setInterval(slider.animateSlides, slider.vars.slideshowSpeed);\n      slider.started = slider.playing = true;\n      // PAUSEPLAY:\n      if (slider.vars.pausePlay) {\n        methods.pausePlay.update(\"pause\");\n      }\n      // SYNC:\n      if (slider.syncExists) {\n        methods.sync(\"play\");\n      }\n    };\n    // STOP:\n    slider.stop = function () {\n      slider.pause();\n      slider.stopped = true;\n    };\n    slider.canAdvance = function (target, fromNav) {\n      // ASNAV:\n      var last = asNav ? slider.pagingCount - 1 : slider.last;\n      return fromNav ? true : asNav && slider.currentItem === slider.count - 1 && target === 0 && slider.direction === \"prev\" ? true : asNav && slider.currentItem === 0 && target === slider.pagingCount - 1 && slider.direction !== \"next\" ? false : target === slider.currentSlide && !asNav ? false : slider.vars.animationLoop ? true : slider.atEnd && slider.currentSlide === 0 && target === last && slider.direction !== \"next\" ? false : slider.atEnd && slider.currentSlide === last && target === 0 && slider.direction === \"next\" ? false : true;\n    };\n    slider.getTarget = function (dir) {\n      slider.direction = dir;\n      if (dir === \"next\") {\n        return slider.currentSlide === slider.last ? 0 : slider.currentSlide + 1;\n      } else {\n        return slider.currentSlide === 0 ? slider.last : slider.currentSlide - 1;\n      }\n    };\n\n    // SLIDE:\n    slider.setProps = function (pos, special, dur) {\n      var target = function () {\n        var posCheck = pos ? pos : (slider.itemW + slider.vars.itemMargin) * slider.move * slider.animatingTo,\n            posCalc = function () {\n          if (carousel) {\n            return special === \"setTouch\" ? pos : reverse && slider.animatingTo === slider.last ? 0 : reverse ? slider.limit - (slider.itemW + slider.vars.itemMargin) * slider.move * slider.animatingTo : slider.animatingTo === slider.last ? slider.limit : posCheck;\n          } else {\n            switch (special) {\n              case \"setTotal\":\n                return reverse ? (slider.count - 1 - slider.currentSlide + slider.cloneOffset) * pos : (slider.currentSlide + slider.cloneOffset) * pos;\n              case \"setTouch\":\n                return reverse ? pos : pos;\n              case \"jumpEnd\":\n                return reverse ? pos : slider.count * pos;\n              case \"jumpStart\":\n                return reverse ? slider.count * pos : pos;\n              default:\n                return pos;\n            }\n          }\n        }();\n\n        return posCalc * (slider.vars.rtl ? 1 : -1) + \"px\";\n      }();\n\n      if (slider.transitions) {\n        if (slider.isFirefox) {\n          target = vertical ? \"translate3d(0,\" + target + \",0)\" : \"translate3d(\" + (parseInt(target) + 'px') + \",0,0)\";\n        } else {\n          target = vertical ? \"translate3d(0,\" + target + \",0)\" : \"translate3d(\" + ((slider.vars.rtl ? -1 : 1) * parseInt(target) + 'px') + \",0,0)\";\n        }\n        dur = dur !== undefined ? dur / 1000 + \"s\" : \"0s\";\n        slider.container.css(\"-\" + slider.pfx + \"-transition-duration\", dur);\n        slider.container.css(\"transition-duration\", dur);\n      }\n\n      slider.args[slider.prop] = target;\n      if (slider.transitions || dur === undefined) {\n        slider.container.css(slider.args);\n      }\n\n      slider.container.css('transform', target);\n    };\n\n    slider.setup = function (type) {\n      // SLIDE:\n      if (!fade) {\n        var sliderOffset, arr;\n\n        if (type === \"init\") {\n          slider.viewport = $('<div class=\"' + namespace + 'viewport\"></div>').css({ \"overflow\": \"hidden\", \"position\": \"relative\" }).appendTo(slider).append(slider.container);\n          // INFINITE LOOP:\n          slider.cloneCount = 0;\n          slider.cloneOffset = 0;\n          // REVERSE:\n          if (reverse) {\n            arr = $.makeArray(slider.slides).reverse();\n            slider.slides = $(arr);\n            slider.container.empty().append(slider.slides);\n          }\n        }\n        // INFINITE LOOP && !CAROUSEL:\n        if (slider.vars.animationLoop && !carousel) {\n          slider.cloneCount = 2;\n          slider.cloneOffset = 1;\n          // clear out old clones\n          if (type !== \"init\") {\n            slider.container.find('.clone').remove();\n          }\n          slider.container.append(methods.uniqueID(slider.slides.first().clone().addClass('clone')).attr('aria-hidden', 'true')).prepend(methods.uniqueID(slider.slides.last().clone().addClass('clone')).attr('aria-hidden', 'true'));\n        }\n        slider.newSlides = $(slider.vars.selector, slider);\n\n        sliderOffset = reverse ? slider.count - 1 - slider.currentSlide + slider.cloneOffset : slider.currentSlide + slider.cloneOffset;\n        // VERTICAL:\n        if (vertical && !carousel) {\n          slider.container.height((slider.count + slider.cloneCount) * 200 + \"%\").css(\"position\", \"absolute\").width(\"100%\");\n          setTimeout(function () {\n            slider.newSlides.css({ \"display\": \"block\" });\n            slider.doMath();\n            slider.viewport.height(slider.h);\n            slider.setProps(sliderOffset * slider.h, \"init\");\n          }, type === \"init\" ? 100 : 0);\n        } else {\n          slider.container.width((slider.count + slider.cloneCount) * 200 + \"%\");\n          slider.setProps(sliderOffset * slider.computedW, \"init\");\n          setTimeout(function () {\n            slider.doMath();\n            if (slider.vars.rtl) {\n              if (slider.isFirefox) {\n                slider.newSlides.css({ \"width\": slider.computedW, \"marginRight\": slider.computedM, \"float\": \"right\", \"display\": \"block\" });\n              } else {\n                slider.newSlides.css({ \"width\": slider.computedW, \"marginRight\": slider.computedM, \"float\": \"left\", \"display\": \"block\" });\n              }\n            } else {\n              slider.newSlides.css({ \"width\": slider.computedW, \"marginRight\": slider.computedM, \"float\": \"left\", \"display\": \"block\" });\n            }\n            // SMOOTH HEIGHT:\n            if (slider.vars.smoothHeight) {\n              methods.smoothHeight();\n            }\n          }, type === \"init\" ? 100 : 0);\n        }\n      } else {\n        // FADE:\n        if (slider.vars.rtl) {\n          slider.slides.css({ \"width\": \"100%\", \"float\": 'right', \"marginLeft\": \"-100%\", \"position\": \"relative\" });\n        } else {\n          slider.slides.css({ \"width\": \"100%\", \"float\": 'left', \"marginRight\": \"-100%\", \"position\": \"relative\" });\n        }\n        if (type === \"init\") {\n          if (!touch) {\n            //slider.slides.eq(slider.currentSlide).fadeIn(slider.vars.animationSpeed, slider.vars.easing);\n            if (slider.vars.fadeFirstSlide == false) {\n              slider.slides.css({ \"opacity\": 0, \"display\": \"block\", \"zIndex\": 1 }).eq(slider.currentSlide).css({ \"zIndex\": 2 }).css({ \"opacity\": 1 });\n            } else {\n              slider.slides.css({ \"opacity\": 0, \"display\": \"block\", \"zIndex\": 1 }).eq(slider.currentSlide).css({ \"zIndex\": 2 }).animate({ \"opacity\": 1 }, slider.vars.animationSpeed, slider.vars.easing);\n            }\n          } else {\n            slider.slides.css({ \"opacity\": 0, \"display\": \"block\", \"webkitTransition\": \"opacity \" + slider.vars.animationSpeed / 1000 + \"s ease\", \"zIndex\": 1 }).eq(slider.currentSlide).css({ \"opacity\": 1, \"zIndex\": 2 });\n          }\n        }\n        // SMOOTH HEIGHT:\n        if (slider.vars.smoothHeight) {\n          methods.smoothHeight();\n        }\n      }\n      // !CAROUSEL:\n      // CANDIDATE: active slide\n      if (!carousel) {\n        slider.slides.removeClass(namespace + \"active-slide\").eq(slider.currentSlide).addClass(namespace + \"active-slide\");\n      }\n\n      //FlexSlider: init() Callback\n      slider.vars.init(slider);\n    };\n\n    slider.doMath = function () {\n      var slide = slider.slides.first(),\n          slideMargin = slider.vars.itemMargin,\n          minItems = slider.vars.minItems,\n          maxItems = slider.vars.maxItems;\n\n      slider.w = slider.viewport === undefined ? slider.width() : slider.viewport.width();\n      if (slider.isFirefox) {\n        slider.w = slider.width();\n      }\n      slider.h = slide.height();\n      slider.boxPadding = slide.outerWidth() - slide.width();\n\n      // CAROUSEL:\n      if (carousel) {\n        slider.itemT = slider.vars.itemWidth + slideMargin;\n        slider.itemM = slideMargin;\n        slider.minW = minItems ? minItems * slider.itemT : slider.w;\n        slider.maxW = maxItems ? maxItems * slider.itemT - slideMargin : slider.w;\n        slider.itemW = slider.minW > slider.w ? (slider.w - slideMargin * (minItems - 1)) / minItems : slider.maxW < slider.w ? (slider.w - slideMargin * (maxItems - 1)) / maxItems : slider.vars.itemWidth > slider.w ? slider.w : slider.vars.itemWidth;\n\n        slider.visible = Math.floor(slider.w / slider.itemW);\n        slider.move = slider.vars.move > 0 && slider.vars.move < slider.visible ? slider.vars.move : slider.visible;\n        slider.pagingCount = Math.ceil((slider.count - slider.visible) / slider.move + 1);\n        slider.last = slider.pagingCount - 1;\n        slider.limit = slider.pagingCount === 1 ? 0 : slider.vars.itemWidth > slider.w ? slider.itemW * (slider.count - 1) + slideMargin * (slider.count - 1) : (slider.itemW + slideMargin) * slider.count - slider.w - slideMargin;\n      } else {\n        slider.itemW = slider.w;\n        slider.itemM = slideMargin;\n        slider.pagingCount = slider.count;\n        slider.last = slider.count - 1;\n      }\n      slider.computedW = slider.itemW - slider.boxPadding;\n      slider.computedM = slider.itemM;\n    };\n\n    slider.update = function (pos, action) {\n      slider.doMath();\n\n      // update currentSlide and slider.animatingTo if necessary\n      if (!carousel) {\n        if (pos < slider.currentSlide) {\n          slider.currentSlide += 1;\n        } else if (pos <= slider.currentSlide && pos !== 0) {\n          slider.currentSlide -= 1;\n        }\n        slider.animatingTo = slider.currentSlide;\n      }\n\n      // update controlNav\n      if (slider.vars.controlNav && !slider.manualControls) {\n        if (action === \"add\" && !carousel || slider.pagingCount > slider.controlNav.length) {\n          methods.controlNav.update(\"add\");\n        } else if (action === \"remove\" && !carousel || slider.pagingCount < slider.controlNav.length) {\n          if (carousel && slider.currentSlide > slider.last) {\n            slider.currentSlide -= 1;\n            slider.animatingTo -= 1;\n          }\n          methods.controlNav.update(\"remove\", slider.last);\n        }\n      }\n      // update directionNav\n      if (slider.vars.directionNav) {\n        methods.directionNav.update();\n      }\n    };\n\n    slider.addSlide = function (obj, pos) {\n      var $obj = $(obj);\n\n      slider.count += 1;\n      slider.last = slider.count - 1;\n\n      // append new slide\n      if (vertical && reverse) {\n        pos !== undefined ? slider.slides.eq(slider.count - pos).after($obj) : slider.container.prepend($obj);\n      } else {\n        pos !== undefined ? slider.slides.eq(pos).before($obj) : slider.container.append($obj);\n      }\n\n      // update currentSlide, animatingTo, controlNav, and directionNav\n      slider.update(pos, \"add\");\n\n      // update slider.slides\n      slider.slides = $(slider.vars.selector + ':not(.clone)', slider);\n      // re-setup the slider to accomdate new slide\n      slider.setup();\n\n      //FlexSlider: added() Callback\n      slider.vars.added(slider);\n    };\n    slider.removeSlide = function (obj) {\n      var pos = isNaN(obj) ? slider.slides.index($(obj)) : obj;\n\n      // update count\n      slider.count -= 1;\n      slider.last = slider.count - 1;\n\n      // remove slide\n      if (isNaN(obj)) {\n        $(obj, slider.slides).remove();\n      } else {\n        vertical && reverse ? slider.slides.eq(slider.last).remove() : slider.slides.eq(obj).remove();\n      }\n\n      // update currentSlide, animatingTo, controlNav, and directionNav\n      slider.doMath();\n      slider.update(pos, \"remove\");\n\n      // update slider.slides\n      slider.slides = $(slider.vars.selector + ':not(.clone)', slider);\n      // re-setup the slider to accomdate new slide\n      slider.setup();\n\n      // FlexSlider: removed() Callback\n      slider.vars.removed(slider);\n    };\n\n    //FlexSlider: Initialize\n    methods.init();\n  };\n\n  // Ensure the slider isn't focussed if the window loses focus.\n  $(window).blur(function (e) {\n    focused = false;\n  }).focus(function (e) {\n    focused = true;\n  });\n\n  //FlexSlider: Default Settings\n  $.flexslider.defaults = {\n    namespace: \"flex-\", //{NEW} String: Prefix string attached to the class of every element generated by the plugin\n    selector: \".slides > li\", //{NEW} Selector: Must match a simple pattern. '{container} > {slide}' -- Ignore pattern at your own peril\n    animation: \"fade\", //String: Select your animation type, \"fade\" or \"slide\"\n    easing: \"swing\", //{NEW} String: Determines the easing method used in jQuery transitions. jQuery easing plugin is supported!\n    direction: \"horizontal\", //String: Select the sliding direction, \"horizontal\" or \"vertical\"\n    reverse: false, //{NEW} Boolean: Reverse the animation direction\n    animationLoop: true, //Boolean: Should the animation loop? If false, directionNav will received \"disable\" classes at either end\n    smoothHeight: false, //{NEW} Boolean: Allow height of the slider to animate smoothly in horizontal mode\n    startAt: 0, //Integer: The slide that the slider should start on. Array notation (0 = first slide)\n    slideshow: true, //Boolean: Animate slider automatically\n    slideshowSpeed: 7000, //Integer: Set the speed of the slideshow cycling, in milliseconds\n    animationSpeed: 600, //Integer: Set the speed of animations, in milliseconds\n    initDelay: 0, //{NEW} Integer: Set an initialization delay, in milliseconds\n    randomize: false, //Boolean: Randomize slide order\n    fadeFirstSlide: true, //Boolean: Fade in the first slide when animation type is \"fade\"\n    thumbCaptions: false, //Boolean: Whether or not to put captions on thumbnails when using the \"thumbnails\" controlNav.\n\n    // Usability features\n    pauseOnAction: true, //Boolean: Pause the slideshow when interacting with control elements, highly recommended.\n    pauseOnHover: false, //Boolean: Pause the slideshow when hovering over slider, then resume when no longer hovering\n    pauseInvisible: true, //{NEW} Boolean: Pause the slideshow when tab is invisible, resume when visible. Provides better UX, lower CPU usage.\n    useCSS: true, //{NEW} Boolean: Slider will use CSS3 transitions if available\n    touch: true, //{NEW} Boolean: Allow touch swipe navigation of the slider on touch-enabled devices\n    video: false, //{NEW} Boolean: If using video in the slider, will prevent CSS3 3D Transforms to avoid graphical glitches\n\n    // Primary Controls\n    controlNav: true, //Boolean: Create navigation for paging control of each slide? Note: Leave true for manualControls usage\n    directionNav: true, //Boolean: Create navigation for previous/next navigation? (true/false)\n    prevText: \"Previous\", //String: Set the text for the \"previous\" directionNav item\n    nextText: \"Next\", //String: Set the text for the \"next\" directionNav item\n\n    // Secondary Navigation\n    keyboard: true, //Boolean: Allow slider navigating via keyboard left/right keys\n    multipleKeyboard: false, //{NEW} Boolean: Allow keyboard navigation to affect multiple sliders. Default behavior cuts out keyboard navigation with more than one slider present.\n    mousewheel: false, //{UPDATED} Boolean: Requires jquery.mousewheel.js (https://github.com/brandonaaron/jquery-mousewheel) - Allows slider navigating via mousewheel\n    pausePlay: false, //Boolean: Create pause/play dynamic element\n    pauseText: \"Pause\", //String: Set the text for the \"pause\" pausePlay item\n    playText: \"Play\", //String: Set the text for the \"play\" pausePlay item\n\n    // Special properties\n    controlsContainer: \"\", //{UPDATED} jQuery Object/Selector: Declare which container the navigation elements should be appended too. Default container is the FlexSlider element. Example use would be $(\".flexslider-container\"). Property is ignored if given element is not found.\n    manualControls: \"\", //{UPDATED} jQuery Object/Selector: Declare custom control navigation. Examples would be $(\".flex-control-nav li\") or \"#tabs-nav li img\", etc. The number of elements in your controlNav should match the number of slides/tabs.\n    customDirectionNav: \"\", //{NEW} jQuery Object/Selector: Custom prev / next button. Must be two jQuery elements. In order to make the events work they have to have the classes \"prev\" and \"next\" (plus namespace)\n    sync: \"\", //{NEW} Selector: Mirror the actions performed on this slider with another slider. Use with care.\n    asNavFor: \"\", //{NEW} Selector: Internal property exposed for turning the slider into a thumbnail navigation for another slider\n\n    // Carousel Options\n    itemWidth: 0, //{NEW} Integer: Box-model width of individual carousel items, including horizontal borders and padding.\n    itemMargin: 0, //{NEW} Integer: Margin between carousel items.\n    minItems: 1, //{NEW} Integer: Minimum number of carousel items that should be visible. Items will resize fluidly when below this.\n    maxItems: 0, //{NEW} Integer: Maxmimum number of carousel items that should be visible. Items will resize fluidly when above this limit.\n    move: 0, //{NEW} Integer: Number of carousel items that should move on animation. If 0, slider will move all visible items.\n    allowOneSlide: true, //{NEW} Boolean: Whether or not to allow a slider comprised of a single slide\n\n    // Browser Specific\n    isFirefox: false, // {NEW} Boolean: Set to true when Firefox is the browser used.\n\n    // Callback API\n    start: function start() {}, //Callback: function(slider) - Fires when the slider loads the first slide\n    before: function before() {}, //Callback: function(slider) - Fires asynchronously with each slider animation\n    after: function after() {}, //Callback: function(slider) - Fires after each slider animation completes\n    end: function end() {}, //Callback: function(slider) - Fires when the slider reaches the last slide (asynchronous)\n    added: function added() {}, //{NEW} Callback: function(slider) - Fires after a slide is added\n    removed: function removed() {}, //{NEW} Callback: function(slider) - Fires after a slide is removed\n    init: function init() {}, //{NEW} Callback: function(slider) - Fires after the slider is initially setup\n    rtl: false //{NEW} Boolean: Whether or not to enable RTL mode\n  };\n\n  //FlexSlider: Plugin Function\n  $.fn.flexslider = function (options) {\n    if (options === undefined) {\n      options = {};\n    }\n\n    if ((typeof options === 'undefined' ? 'undefined' : _typeof(options)) === \"object\") {\n      return this.each(function () {\n        var $this = $(this),\n            selector = options.selector ? options.selector : \".slides > li\",\n            $slides = $this.find(selector);\n\n        if ($slides.length === 1 && options.allowOneSlide === false || $slides.length === 0) {\n          $slides.fadeIn(400);\n          if (options.start) {\n            options.start($this);\n          }\n        } else if ($this.data('flexslider') === undefined) {\n          new $.flexslider(this, options);\n        }\n      });\n    } else {\n      // Helper strings to quickly perform functions on the slider\n      var $slider = $(this).data('flexslider');\n      switch (options) {\n        case \"play\":\n          $slider.play();break;\n        case \"pause\":\n          $slider.pause();break;\n        case \"stop\":\n          $slider.stop();break;\n        case \"next\":\n          $slider.flexAnimate($slider.getTarget(\"next\"), true);break;\n        case \"prev\":\n        case \"previous\":\n          $slider.flexAnimate($slider.getTarget(\"prev\"), true);break;\n        default:\n          if (typeof options === \"number\") {\n            $slider.flexAnimate(options, true);\n          }\n      }\n    }\n  };\n})(jQuery);\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(43).setImmediate))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///42\n");

/***/ }),

/***/ 43:
/***/ (function(module, exports, __webpack_require__) {

eval("/* WEBPACK VAR INJECTION */(function(global) {var scope = (typeof global !== \"undefined\" && global) ||\n            (typeof self !== \"undefined\" && self) ||\n            window;\nvar apply = Function.prototype.apply;\n\n// DOM APIs, for completeness\n\nexports.setTimeout = function() {\n  return new Timeout(apply.call(setTimeout, scope, arguments), clearTimeout);\n};\nexports.setInterval = function() {\n  return new Timeout(apply.call(setInterval, scope, arguments), clearInterval);\n};\nexports.clearTimeout =\nexports.clearInterval = function(timeout) {\n  if (timeout) {\n    timeout.close();\n  }\n};\n\nfunction Timeout(id, clearFn) {\n  this._id = id;\n  this._clearFn = clearFn;\n}\nTimeout.prototype.unref = Timeout.prototype.ref = function() {};\nTimeout.prototype.close = function() {\n  this._clearFn.call(scope, this._id);\n};\n\n// Does not start the time, just sets up the members needed.\nexports.enroll = function(item, msecs) {\n  clearTimeout(item._idleTimeoutId);\n  item._idleTimeout = msecs;\n};\n\nexports.unenroll = function(item) {\n  clearTimeout(item._idleTimeoutId);\n  item._idleTimeout = -1;\n};\n\nexports._unrefActive = exports.active = function(item) {\n  clearTimeout(item._idleTimeoutId);\n\n  var msecs = item._idleTimeout;\n  if (msecs >= 0) {\n    item._idleTimeoutId = setTimeout(function onTimeout() {\n      if (item._onTimeout)\n        item._onTimeout();\n    }, msecs);\n  }\n};\n\n// setimmediate attaches itself to the global object\n__webpack_require__(44);\n// On some exotic environments, it's not clear which object `setimmediate` was\n// able to install onto.  Search each possibility in the same order as the\n// `setimmediate` library.\nexports.setImmediate = (typeof self !== \"undefined\" && self.setImmediate) ||\n                       (typeof global !== \"undefined\" && global.setImmediate) ||\n                       (this && this.setImmediate);\nexports.clearImmediate = (typeof self !== \"undefined\" && self.clearImmediate) ||\n                         (typeof global !== \"undefined\" && global.clearImmediate) ||\n                         (this && this.clearImmediate);\n\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1)))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvdGltZXJzLWJyb3dzZXJpZnkvbWFpbi5qcz9kN2FkIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7O0FBRUE7QUFDQSxtQkFBTyxDQUFDLEVBQWM7QUFDdEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwiZmlsZSI6IjQzLmpzIiwic291cmNlc0NvbnRlbnQiOlsidmFyIHNjb3BlID0gKHR5cGVvZiBnbG9iYWwgIT09IFwidW5kZWZpbmVkXCIgJiYgZ2xvYmFsKSB8fFxuICAgICAgICAgICAgKHR5cGVvZiBzZWxmICE9PSBcInVuZGVmaW5lZFwiICYmIHNlbGYpIHx8XG4gICAgICAgICAgICB3aW5kb3c7XG52YXIgYXBwbHkgPSBGdW5jdGlvbi5wcm90b3R5cGUuYXBwbHk7XG5cbi8vIERPTSBBUElzLCBmb3IgY29tcGxldGVuZXNzXG5cbmV4cG9ydHMuc2V0VGltZW91dCA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gbmV3IFRpbWVvdXQoYXBwbHkuY2FsbChzZXRUaW1lb3V0LCBzY29wZSwgYXJndW1lbnRzKSwgY2xlYXJUaW1lb3V0KTtcbn07XG5leHBvcnRzLnNldEludGVydmFsID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiBuZXcgVGltZW91dChhcHBseS5jYWxsKHNldEludGVydmFsLCBzY29wZSwgYXJndW1lbnRzKSwgY2xlYXJJbnRlcnZhbCk7XG59O1xuZXhwb3J0cy5jbGVhclRpbWVvdXQgPVxuZXhwb3J0cy5jbGVhckludGVydmFsID0gZnVuY3Rpb24odGltZW91dCkge1xuICBpZiAodGltZW91dCkge1xuICAgIHRpbWVvdXQuY2xvc2UoKTtcbiAgfVxufTtcblxuZnVuY3Rpb24gVGltZW91dChpZCwgY2xlYXJGbikge1xuICB0aGlzLl9pZCA9IGlkO1xuICB0aGlzLl9jbGVhckZuID0gY2xlYXJGbjtcbn1cblRpbWVvdXQucHJvdG90eXBlLnVucmVmID0gVGltZW91dC5wcm90b3R5cGUucmVmID0gZnVuY3Rpb24oKSB7fTtcblRpbWVvdXQucHJvdG90eXBlLmNsb3NlID0gZnVuY3Rpb24oKSB7XG4gIHRoaXMuX2NsZWFyRm4uY2FsbChzY29wZSwgdGhpcy5faWQpO1xufTtcblxuLy8gRG9lcyBub3Qgc3RhcnQgdGhlIHRpbWUsIGp1c3Qgc2V0cyB1cCB0aGUgbWVtYmVycyBuZWVkZWQuXG5leHBvcnRzLmVucm9sbCA9IGZ1bmN0aW9uKGl0ZW0sIG1zZWNzKSB7XG4gIGNsZWFyVGltZW91dChpdGVtLl9pZGxlVGltZW91dElkKTtcbiAgaXRlbS5faWRsZVRpbWVvdXQgPSBtc2Vjcztcbn07XG5cbmV4cG9ydHMudW5lbnJvbGwgPSBmdW5jdGlvbihpdGVtKSB7XG4gIGNsZWFyVGltZW91dChpdGVtLl9pZGxlVGltZW91dElkKTtcbiAgaXRlbS5faWRsZVRpbWVvdXQgPSAtMTtcbn07XG5cbmV4cG9ydHMuX3VucmVmQWN0aXZlID0gZXhwb3J0cy5hY3RpdmUgPSBmdW5jdGlvbihpdGVtKSB7XG4gIGNsZWFyVGltZW91dChpdGVtLl9pZGxlVGltZW91dElkKTtcblxuICB2YXIgbXNlY3MgPSBpdGVtLl9pZGxlVGltZW91dDtcbiAgaWYgKG1zZWNzID49IDApIHtcbiAgICBpdGVtLl9pZGxlVGltZW91dElkID0gc2V0VGltZW91dChmdW5jdGlvbiBvblRpbWVvdXQoKSB7XG4gICAgICBpZiAoaXRlbS5fb25UaW1lb3V0KVxuICAgICAgICBpdGVtLl9vblRpbWVvdXQoKTtcbiAgICB9LCBtc2Vjcyk7XG4gIH1cbn07XG5cbi8vIHNldGltbWVkaWF0ZSBhdHRhY2hlcyBpdHNlbGYgdG8gdGhlIGdsb2JhbCBvYmplY3RcbnJlcXVpcmUoXCJzZXRpbW1lZGlhdGVcIik7XG4vLyBPbiBzb21lIGV4b3RpYyBlbnZpcm9ubWVudHMsIGl0J3Mgbm90IGNsZWFyIHdoaWNoIG9iamVjdCBgc2V0aW1tZWRpYXRlYCB3YXNcbi8vIGFibGUgdG8gaW5zdGFsbCBvbnRvLiAgU2VhcmNoIGVhY2ggcG9zc2liaWxpdHkgaW4gdGhlIHNhbWUgb3JkZXIgYXMgdGhlXG4vLyBgc2V0aW1tZWRpYXRlYCBsaWJyYXJ5LlxuZXhwb3J0cy5zZXRJbW1lZGlhdGUgPSAodHlwZW9mIHNlbGYgIT09IFwidW5kZWZpbmVkXCIgJiYgc2VsZi5zZXRJbW1lZGlhdGUpIHx8XG4gICAgICAgICAgICAgICAgICAgICAgICh0eXBlb2YgZ2xvYmFsICE9PSBcInVuZGVmaW5lZFwiICYmIGdsb2JhbC5zZXRJbW1lZGlhdGUpIHx8XG4gICAgICAgICAgICAgICAgICAgICAgICh0aGlzICYmIHRoaXMuc2V0SW1tZWRpYXRlKTtcbmV4cG9ydHMuY2xlYXJJbW1lZGlhdGUgPSAodHlwZW9mIHNlbGYgIT09IFwidW5kZWZpbmVkXCIgJiYgc2VsZi5jbGVhckltbWVkaWF0ZSkgfHxcbiAgICAgICAgICAgICAgICAgICAgICAgICAodHlwZW9mIGdsb2JhbCAhPT0gXCJ1bmRlZmluZWRcIiAmJiBnbG9iYWwuY2xlYXJJbW1lZGlhdGUpIHx8XG4gICAgICAgICAgICAgICAgICAgICAgICAgKHRoaXMgJiYgdGhpcy5jbGVhckltbWVkaWF0ZSk7XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy90aW1lcnMtYnJvd3NlcmlmeS9tYWluLmpzXG4vLyBtb2R1bGUgaWQgPSA0M1xuLy8gbW9kdWxlIGNodW5rcyA9IDEiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///43\n");

/***/ }),

/***/ 44:
/***/ (function(module, exports, __webpack_require__) {

eval("/* WEBPACK VAR INJECTION */(function(global, process) {(function (global, undefined) {\n    \"use strict\";\n\n    if (global.setImmediate) {\n        return;\n    }\n\n    var nextHandle = 1; // Spec says greater than zero\n    var tasksByHandle = {};\n    var currentlyRunningATask = false;\n    var doc = global.document;\n    var registerImmediate;\n\n    function setImmediate(callback) {\n      // Callback can either be a function or a string\n      if (typeof callback !== \"function\") {\n        callback = new Function(\"\" + callback);\n      }\n      // Copy function arguments\n      var args = new Array(arguments.length - 1);\n      for (var i = 0; i < args.length; i++) {\n          args[i] = arguments[i + 1];\n      }\n      // Store and register the task\n      var task = { callback: callback, args: args };\n      tasksByHandle[nextHandle] = task;\n      registerImmediate(nextHandle);\n      return nextHandle++;\n    }\n\n    function clearImmediate(handle) {\n        delete tasksByHandle[handle];\n    }\n\n    function run(task) {\n        var callback = task.callback;\n        var args = task.args;\n        switch (args.length) {\n        case 0:\n            callback();\n            break;\n        case 1:\n            callback(args[0]);\n            break;\n        case 2:\n            callback(args[0], args[1]);\n            break;\n        case 3:\n            callback(args[0], args[1], args[2]);\n            break;\n        default:\n            callback.apply(undefined, args);\n            break;\n        }\n    }\n\n    function runIfPresent(handle) {\n        // From the spec: \"Wait until any invocations of this algorithm started before this one have completed.\"\n        // So if we're currently running a task, we'll need to delay this invocation.\n        if (currentlyRunningATask) {\n            // Delay by doing a setTimeout. setImmediate was tried instead, but in Firefox 7 it generated a\n            // \"too much recursion\" error.\n            setTimeout(runIfPresent, 0, handle);\n        } else {\n            var task = tasksByHandle[handle];\n            if (task) {\n                currentlyRunningATask = true;\n                try {\n                    run(task);\n                } finally {\n                    clearImmediate(handle);\n                    currentlyRunningATask = false;\n                }\n            }\n        }\n    }\n\n    function installNextTickImplementation() {\n        registerImmediate = function(handle) {\n            process.nextTick(function () { runIfPresent(handle); });\n        };\n    }\n\n    function canUsePostMessage() {\n        // The test against `importScripts` prevents this implementation from being installed inside a web worker,\n        // where `global.postMessage` means something completely different and can't be used for this purpose.\n        if (global.postMessage && !global.importScripts) {\n            var postMessageIsAsynchronous = true;\n            var oldOnMessage = global.onmessage;\n            global.onmessage = function() {\n                postMessageIsAsynchronous = false;\n            };\n            global.postMessage(\"\", \"*\");\n            global.onmessage = oldOnMessage;\n            return postMessageIsAsynchronous;\n        }\n    }\n\n    function installPostMessageImplementation() {\n        // Installs an event handler on `global` for the `message` event: see\n        // * https://developer.mozilla.org/en/DOM/window.postMessage\n        // * http://www.whatwg.org/specs/web-apps/current-work/multipage/comms.html#crossDocumentMessages\n\n        var messagePrefix = \"setImmediate$\" + Math.random() + \"$\";\n        var onGlobalMessage = function(event) {\n            if (event.source === global &&\n                typeof event.data === \"string\" &&\n                event.data.indexOf(messagePrefix) === 0) {\n                runIfPresent(+event.data.slice(messagePrefix.length));\n            }\n        };\n\n        if (global.addEventListener) {\n            global.addEventListener(\"message\", onGlobalMessage, false);\n        } else {\n            global.attachEvent(\"onmessage\", onGlobalMessage);\n        }\n\n        registerImmediate = function(handle) {\n            global.postMessage(messagePrefix + handle, \"*\");\n        };\n    }\n\n    function installMessageChannelImplementation() {\n        var channel = new MessageChannel();\n        channel.port1.onmessage = function(event) {\n            var handle = event.data;\n            runIfPresent(handle);\n        };\n\n        registerImmediate = function(handle) {\n            channel.port2.postMessage(handle);\n        };\n    }\n\n    function installReadyStateChangeImplementation() {\n        var html = doc.documentElement;\n        registerImmediate = function(handle) {\n            // Create a <script> element; its readystatechange event will be fired asynchronously once it is inserted\n            // into the document. Do so, thus queuing up the task. Remember to clean up once it's been called.\n            var script = doc.createElement(\"script\");\n            script.onreadystatechange = function () {\n                runIfPresent(handle);\n                script.onreadystatechange = null;\n                html.removeChild(script);\n                script = null;\n            };\n            html.appendChild(script);\n        };\n    }\n\n    function installSetTimeoutImplementation() {\n        registerImmediate = function(handle) {\n            setTimeout(runIfPresent, 0, handle);\n        };\n    }\n\n    // If supported, we should attach to the prototype of global, since that is where setTimeout et al. live.\n    var attachTo = Object.getPrototypeOf && Object.getPrototypeOf(global);\n    attachTo = attachTo && attachTo.setTimeout ? attachTo : global;\n\n    // Don't get fooled by e.g. browserify environments.\n    if ({}.toString.call(global.process) === \"[object process]\") {\n        // For Node.js before 0.9\n        installNextTickImplementation();\n\n    } else if (canUsePostMessage()) {\n        // For non-IE10 modern browsers\n        installPostMessageImplementation();\n\n    } else if (global.MessageChannel) {\n        // For web workers, where supported\n        installMessageChannelImplementation();\n\n    } else if (doc && \"onreadystatechange\" in doc.createElement(\"script\")) {\n        // For IE 6–8\n        installReadyStateChangeImplementation();\n\n    } else {\n        // For older browsers\n        installSetTimeoutImplementation();\n    }\n\n    attachTo.setImmediate = setImmediate;\n    attachTo.clearImmediate = clearImmediate;\n}(typeof self === \"undefined\" ? typeof global === \"undefined\" ? this : global : self));\n\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1), __webpack_require__(45)))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///44\n");

/***/ }),

/***/ 45:
/***/ (function(module, exports) {

eval("// shim for using process in browser\nvar process = module.exports = {};\n\n// cached from whatever global is present so that test runners that stub it\n// don't break things.  But we need to wrap it in a try catch in case it is\n// wrapped in strict mode code which doesn't define any globals.  It's inside a\n// function because try/catches deoptimize in certain engines.\n\nvar cachedSetTimeout;\nvar cachedClearTimeout;\n\nfunction defaultSetTimout() {\n    throw new Error('setTimeout has not been defined');\n}\nfunction defaultClearTimeout () {\n    throw new Error('clearTimeout has not been defined');\n}\n(function () {\n    try {\n        if (typeof setTimeout === 'function') {\n            cachedSetTimeout = setTimeout;\n        } else {\n            cachedSetTimeout = defaultSetTimout;\n        }\n    } catch (e) {\n        cachedSetTimeout = defaultSetTimout;\n    }\n    try {\n        if (typeof clearTimeout === 'function') {\n            cachedClearTimeout = clearTimeout;\n        } else {\n            cachedClearTimeout = defaultClearTimeout;\n        }\n    } catch (e) {\n        cachedClearTimeout = defaultClearTimeout;\n    }\n} ())\nfunction runTimeout(fun) {\n    if (cachedSetTimeout === setTimeout) {\n        //normal enviroments in sane situations\n        return setTimeout(fun, 0);\n    }\n    // if setTimeout wasn't available but was latter defined\n    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {\n        cachedSetTimeout = setTimeout;\n        return setTimeout(fun, 0);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedSetTimeout(fun, 0);\n    } catch(e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally\n            return cachedSetTimeout.call(null, fun, 0);\n        } catch(e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error\n            return cachedSetTimeout.call(this, fun, 0);\n        }\n    }\n\n\n}\nfunction runClearTimeout(marker) {\n    if (cachedClearTimeout === clearTimeout) {\n        //normal enviroments in sane situations\n        return clearTimeout(marker);\n    }\n    // if clearTimeout wasn't available but was latter defined\n    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {\n        cachedClearTimeout = clearTimeout;\n        return clearTimeout(marker);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedClearTimeout(marker);\n    } catch (e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally\n            return cachedClearTimeout.call(null, marker);\n        } catch (e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.\n            // Some versions of I.E. have different rules for clearTimeout vs setTimeout\n            return cachedClearTimeout.call(this, marker);\n        }\n    }\n\n\n\n}\nvar queue = [];\nvar draining = false;\nvar currentQueue;\nvar queueIndex = -1;\n\nfunction cleanUpNextTick() {\n    if (!draining || !currentQueue) {\n        return;\n    }\n    draining = false;\n    if (currentQueue.length) {\n        queue = currentQueue.concat(queue);\n    } else {\n        queueIndex = -1;\n    }\n    if (queue.length) {\n        drainQueue();\n    }\n}\n\nfunction drainQueue() {\n    if (draining) {\n        return;\n    }\n    var timeout = runTimeout(cleanUpNextTick);\n    draining = true;\n\n    var len = queue.length;\n    while(len) {\n        currentQueue = queue;\n        queue = [];\n        while (++queueIndex < len) {\n            if (currentQueue) {\n                currentQueue[queueIndex].run();\n            }\n        }\n        queueIndex = -1;\n        len = queue.length;\n    }\n    currentQueue = null;\n    draining = false;\n    runClearTimeout(timeout);\n}\n\nprocess.nextTick = function (fun) {\n    var args = new Array(arguments.length - 1);\n    if (arguments.length > 1) {\n        for (var i = 1; i < arguments.length; i++) {\n            args[i - 1] = arguments[i];\n        }\n    }\n    queue.push(new Item(fun, args));\n    if (queue.length === 1 && !draining) {\n        runTimeout(drainQueue);\n    }\n};\n\n// v8 likes predictible objects\nfunction Item(fun, array) {\n    this.fun = fun;\n    this.array = array;\n}\nItem.prototype.run = function () {\n    this.fun.apply(null, this.array);\n};\nprocess.title = 'browser';\nprocess.browser = true;\nprocess.env = {};\nprocess.argv = [];\nprocess.version = ''; // empty string to avoid regexp issues\nprocess.versions = {};\n\nfunction noop() {}\n\nprocess.on = noop;\nprocess.addListener = noop;\nprocess.once = noop;\nprocess.off = noop;\nprocess.removeListener = noop;\nprocess.removeAllListeners = noop;\nprocess.emit = noop;\nprocess.prependListener = noop;\nprocess.prependOnceListener = noop;\n\nprocess.listeners = function (name) { return [] }\n\nprocess.binding = function (name) {\n    throw new Error('process.binding is not supported');\n};\n\nprocess.cwd = function () { return '/' };\nprocess.chdir = function (dir) {\n    throw new Error('process.chdir is not supported');\n};\nprocess.umask = function() { return 0; };\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///45\n");

/***/ })

/******/ });